version: 1
metadata:
  name: nAI Backend OAuth2 Application
  labels:
    blueprints.goauthentik.io/description: OAuth2 Provider and Application for nAI Backend
entries:
  # OAuth2 Provider für Backend
  - model: authentik_providers_oauth2.oauth2provider
    state: present
    id: provider-nai-backend
    identifiers:
      name: nAI Backend Provider
    attrs:
      name: nAI Backend Provider
      authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
      invalidation_flow: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]
      client_type: confidential
      client_id: nai-backend
      client_secret: !Env AUTHENTIK_BACKEND_CLIENT_SECRET
      redirect_uris:
        - http://localhost:8000/api/v1/auth/callback
        - http://localhost:8000/api/v1/docs/oauth2-redirect
      # Grant Types - WICHTIG für Password Flow!
      authorization_grant_type:
        - authorization_code
        - refresh_token
        - client_credentials
        - password  # Resource Owner Password Credentials Grant
      # Wichtige Einstellungen für OIDC
      sub_mode: hashed_user_id
      include_claims_in_id_token: true
      issuer_mode: per_provider
      # Token Gültigkeit
      access_code_validity: minutes=1
      access_token_validity: hours=24
      refresh_token_validity: days=30
      # Scopes - explizit die UUIDs der Standard-Scope-Mappings hinzufügen
      property_mappings:
        - !Find [authentik_providers_oauth2.scopemapping, [scope_name, openid]]
        - !Find [authentik_providers_oauth2.scopemapping, [scope_name, email]]
        - !Find [authentik_providers_oauth2.scopemapping, [scope_name, profile]]

  # Application für Backend
  - model: authentik_core.application
    state: present
    id: app-nai-backend
    identifiers:
      slug: nai-backend
    attrs:
      name: nAI Backend
      slug: nai-backend
      provider: !KeyOf provider-nai-backend
      meta_launch_url: http://localhost:8000
      meta_icon: https://goauthentik.io/img/icon.png
      meta_description: nAI Backend API Service
      # Erlaubt API Zugriff ohne explizite Berechtigung für alle authentifizierten Benutzer
      policy_engine_mode: any

  # Gruppe für Backend-Zugriff (optional)
  - model: authentik_core.group
    state: present
    id: group-nai-backend-users
    identifiers:
      name: nAI Backend Users
    attrs:
      name: nAI Backend Users

  # Policy für Backend-Zugriff (optional - erlaubt nur Gruppenmitgliedern Zugriff)
  - model: authentik_policies_expression.expressionpolicy
    state: present
    id: policy-nai-backend-access
    identifiers:
      name: nAI Backend Access Policy
    attrs:
      name: nAI Backend Access Policy
      expression: |
        # Erlaubt Zugriff für Admins und Backend Users
        return request.user.is_superuser or ak_is_group_member(request.user, name="nAI Backend Users")

  # Binding der Policy an die Application (optional)
  - model: authentik_policies.policybinding
    state: present
    identifiers:
      policy: !KeyOf policy-nai-backend-access
      target: !KeyOf app-nai-backend
      order: 0
    attrs:
      enabled: true
      order: 0
