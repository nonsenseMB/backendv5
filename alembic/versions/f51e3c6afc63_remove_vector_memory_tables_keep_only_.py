"""Remove vector memory tables - keep only user_preferences

Revision ID: f51e3c6afc63
Revises: 7a44543fbf7f
Create Date: 2025-06-23 17:18:35.478359

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f51e3c6afc63'
down_revision: Union[str, None] = '7a44543fbf7f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('short_term_memory')
    op.drop_index(op.f('ix_memory_shares_tenant_id'), table_name='memory_shares')
    op.drop_table('memory_shares')
    op.drop_index(op.f('ix_long_term_memory_tenant_id'), table_name='long_term_memory')
    op.drop_table('long_term_memory')
    op.add_column('user_preferences', sa.Column('language_preferences', sa.JSON(), nullable=True))
    op.add_column('user_preferences', sa.Column('interface_preferences', sa.JSON(), nullable=True))
    op.add_column('user_preferences', sa.Column('ai_preferences', sa.JSON(), nullable=True))
    op.add_column('user_preferences', sa.Column('privacy_settings', sa.JSON(), nullable=True))
    op.create_unique_constraint(None, 'user_preferences', ['user_id'])
    op.drop_column('user_preferences', 'avoided_topics')
    op.drop_column('user_preferences', 'memory_retention_days')
    op.drop_column('user_preferences', 'agent_interaction_style')
    op.drop_column('user_preferences', 'allow_memory_sharing')
    op.drop_column('user_preferences', 'preferred_languages')
    op.drop_column('user_preferences', 'learning_style')
    op.drop_column('user_preferences', 'communication_style')
    op.drop_column('user_preferences', 'theme')
    op.drop_column('user_preferences', 'preferred_agent_ids')
    op.drop_column('user_preferences', 'response_length')
    op.drop_column('user_preferences', 'decision_style')
    op.drop_column('user_preferences', 'preferred_name')
    op.drop_column('user_preferences', 'expertise_areas')
    op.drop_column('user_preferences', 'custom_preferences')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_preferences', sa.Column('custom_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('expertise_areas', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('preferred_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('decision_style', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('response_length', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('preferred_agent_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('theme', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('communication_style', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('learning_style', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('preferred_languages', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('allow_memory_sharing', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('agent_interaction_style', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('memory_retention_days', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('avoided_topics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_preferences', type_='unique')
    op.drop_column('user_preferences', 'privacy_settings')
    op.drop_column('user_preferences', 'ai_preferences')
    op.drop_column('user_preferences', 'interface_preferences')
    op.drop_column('user_preferences', 'language_preferences')
    op.create_table('long_term_memory',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('memory_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('source_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('conversation_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=True),
    sa.Column('importance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reinforcement_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('embedding_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('access_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('long_term_memory_tenant_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('long_term_memory_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('long_term_memory_pkey'))
    )
    op.create_index(op.f('ix_long_term_memory_tenant_id'), 'long_term_memory', ['tenant_id'], unique=False)
    op.create_table('memory_shares',
    sa.Column('memory_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('memory_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('shared_with_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('shared_with_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('can_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('can_modify', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('shared_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('share_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['shared_by'], ['users.id'], name=op.f('memory_shares_shared_by_fkey')),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('memory_shares_tenant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('memory_shares_pkey'))
    )
    op.create_index(op.f('ix_memory_shares_tenant_id'), 'memory_shares', ['tenant_id'], unique=False)
    op.create_table('short_term_memory',
    sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('memory_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('importance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('accessed_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], name=op.f('short_term_memory_conversation_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('short_term_memory_pkey'))
    )
    # ### end Alembic commands ###